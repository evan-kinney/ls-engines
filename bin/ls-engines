#!/usr/bin/env node

'use strict';

const path = require('path');
const Semver = require('semver');
const { default: intersect } = require('fast_array_intersect');
const chalk = require('chalk');
const yargs = require('yargs');
const allSettled = require('promise.allsettled');
const jsonFile = require('json-file-plus');

const EXITS = require('../exit-codes');

const FALSE = Object(false);
const TRUE = Object(true);

const { argv } = yargs
	.option('mode', {
		choices: ['auto', 'actual', 'virtual', 'ideal'],
		default: 'auto',
		describe: `”actual“ reads from \`${chalk.gray('node_modules')}\`; ”virtual“ reads from a lockfile; “ideal” reads from \`${chalk.gray('package.json')}\``,
	})
	.option('production', {
		default: TRUE,
		describe: 'whether to include production deps or not',
		type: 'boolean',
	})
	.option('dev', {
		default: FALSE,
		describe: 'whether to include dev deps or not',
		type: 'boolean',
	})
	.option('save', {
		default: false,
		describe: `update \`${chalk.gray('package.json')}\`’s “engines” field to match that of your dependency graph`,
		type: 'boolean',
	})
	.option('current', {
		default: true,
		describe: 'check that the current node version matches your dependency graph’s requirements',
		type: 'boolean',
	})
	.check(({ dev, production }) => {
		if (typeof dev === 'boolean' && typeof production === 'boolean') {
			// both arguments were explicitly passed
			if (!dev && !production) {
				throw 'One of `--dev` and `--production` must be enabled.';
			}
		}
		return true;
	})
	// .coerce(['dev', 'production'], x => Boolean.prototype.valueOf.call(x))
	.strict()
	.help();

function normalize(args) {
	let { dev, production } = args;
	if (typeof dev === 'object' && typeof production === 'object') {
		// neither argument was explicitly passed
		dev = false;
		production = true;
	} else if (typeof dev === 'boolean' && typeof production === 'object') {
		// explicitly passed dev/no-dev, did not mention prod
		production = !dev || Boolean.prototype.valueOf.call(production);
	} else if (typeof dev === 'object' && typeof production === 'boolean') {
		// explicitly passed production/no-production, did not mention dev
		dev = !production || Boolean.prototype.valueOf.call(dev);
	}
	return { ...args, dev, production };
}
const { current, dev, mode, production, save } = normalize(argv);

const getTree = require('../get-tree');
const getNodeVersions = require('../get-node-versions');

const pPackage = jsonFile(path.join(process.cwd(), 'package.json'));

const graphRanges = getTree(mode).then(async (tree) => {
	if (!dev || !production) {
		for (const node of tree.children.values()) {
			if ((!dev && node.dev) || (!production && !node.dev)) {
				node.parent = null;
			}
		}
	}
	const graph = Array.from(
		tree.inventory.filter(({ package: { engines } }) => engines && engines.node),
		({ name, package: { engines: { node } } }) => node && [name, node],
	).filter(([, node] = []) => node && node !== '*');

	return graph;
});

function caret(ver) {
	return '^' + ver.replace(/^v/g, '');
}

async function checkCurrent(rootValids, graphValids) {
	const currentValid = rootValids.concat(graphValids).includes(process.version);

	const message = `\nCurrent node version, ${chalk.blue(chalk.bold(process.version))}, is ${chalk.bold(currentValid ? chalk.greenBright('valid') : chalk.red('invalid'))}!`;
	if (currentValid) {
		return {
			output: [message],
		};
	}
	throw {
		code: EXITS.CURRENT,
		output: [message],
	};
}

function isSubset(inner, outer) {
	const outerS = new Set(outer);
	return inner.every((item) => outerS.has(item));
}

async function checkEngines(rootNode, rootValids, graphValids, displayRange, shouldSave) {
	const fixMessage = shouldSave
		? `\n\`${chalk.gray('ls-engines')}\` will automatically fix this, per the \`${chalk.gray('--save')}\` option, by adding the following to your \`${chalk.gray('package.json')}\`:`
		: `\nYou can fix this by running \`${chalk.bold(chalk.gray('ls-engines --save'))}\`, or by manually adding the following to your \`${chalk.gray('package.json')}\`:`;
	/* eslint no-throw-literal: 0 */
	if (rootNode === '*') {
		throw {
			code: EXITS.IMPLICIT,
			output: [
				chalk.bold(chalk.red('\nYour “engines” field is either missing, or set to ”*”! Prefer explicitly setting a supported engine range.')),
				fixMessage,
				chalk.blue(`"engines": ${JSON.stringify({ node: displayRange }, null, 2)}`),
			],
			save(pkg) {
				/* eslint no-param-reassign: 0 */
				if (!pkg.engines) {
					pkg.engines = {};
				}
				pkg.engines.node = displayRange;
			},
		};
	}
	if (rootValids.length === graphValids.length) {
		return {
			output: [
				chalk.bold(chalk.green('\nYour “engines” field exactly matches your dependency graph’s requirements!')),
			],
		};
	}
	if (isSubset(rootValids, graphValids)) {
		const expandMessage = shouldSave
			? `\n\`${chalk.gray('ls-engines')}\` will automatically widen your support, per the \`${chalk.gray('--save')}\` option, by adding the following to your \`${chalk.gray('package.json')}\`:`
			: `\nIf you want to widen your support, you can run \`${chalk.bold(chalk.gray('ls-engines --save'))}\`, or manually add the following to your \`${chalk.gray('package.json')}\`:`;
		return {
			output: [
				chalk.bold(chalk.green('\nYour “engines” field allows fewer node versions than your dependency graph does.')),
				expandMessage,
				chalk.blue(`"engines": ${JSON.stringify({ node: displayRange }, null, 2)}`),
			],
			save(pkg) {
				/* eslint no-param-reassign: 0 */
				if (!pkg.engines) {
					pkg.engines = {};
				}
				pkg.engines.node = displayRange;
			},
		};
	}
	throw {
		code: EXITS.INEXACT,
		output: [
			chalk.red('\nYour “engines” field does not exactly match your dependency graph‘s requirements!'),
			fixMessage,
			chalk.blue(`"engines": ${JSON.stringify({ node: displayRange }, null, 2)}`),
		],
		save(pkg) {
			/* eslint no-param-reassign: 0 */
			if (!pkg.engines) {
				pkg.engines = {};
			}
			pkg.engines.node = displayRange;
		},
	};
}

Promise.all([getNodeVersions(), graphRanges, pPackage]).then(async ([nodeVersions, graph, pkg]) => {
	const rootNode = (pkg.engines && pkg.engines.node) || '*';

	const rootValids = nodeVersions.filter((v) => Semver.satisfies(v, rootNode));
	const graphAllowed = graph.map(([n, r]) => [
		n,
		nodeVersions.filter((v) => Semver.satisfies(v, r)),
	]);
	const graphValids = graph.length > 0 ? intersect(graphAllowed.map(([, vs]) => vs)) : nodeVersions;
	const validMajorRanges = graph.length > 0 ? graphValids.reduceRight((prev, v) => {
		prev = [].concat(prev); // eslint-disable-line no-param-reassign
		return Semver.satisfies(v, caret(prev[prev.length - 1])) ? prev : prev.concat(v);
	}).map(caret) : ['*'];
	const validRange = new Semver.Range(validMajorRanges.join(' || '));
	if (!graphValids.every((v) => validRange.test(v))) {
		throw new RangeError('please report this: ' + graphValids.join(',') + ' / ' + validRange);
	}

	const displayRange = validRange.raw && validRange.raw.replace(/(\.0)+( |$)/g, '$2').split(' ').reverse().join(' ');
	if (validRange.raw) {
		console.log(chalk.gray(`\nValid node version range: ${displayRange}`));
		const versionsByMajor = nodeVersions.reduce((map, v) => {
			const major = Semver.major(v);
			const key = major === 0 ? `${major}.${Semver.minor(v)}` : major;
			if (!map[key]) {
				map[key] = [];
			}
			map[key].push(v);
			return map;
		}, {});
		const latestMajors = Object.values(versionsByMajor)
			.map((vs) => Semver.maxSatisfying(vs, validRange))
			.filter(Boolean)
			.sort(Semver.compare)
			.reverse();
		console.log(chalk.bold(chalk.gray(`\nCurrently available latest releases of each valid node major version: ${latestMajors.join(', ')}`)));
	}

	const pEngines = checkEngines(rootNode, rootValids, graphValids, displayRange, save);

	const pCurrent = current ? checkCurrent(rootValids, graphValids) : { output: [] };

	// print out successes first
	const results = await allSettled([pEngines, pCurrent]);
	results.filter(({ status }) => status === 'fulfilled').forEach(({ value: { output } }) => {
		output.forEach((line) => {
			console.log(line);
		});
	});

	// print out failures last
	results.filter(({ status }) => status === 'rejected').forEach(async ({ reason: { code, output, save: doSave } }) => {
		if (save && doSave) {
			doSave(pkg.data);
			try {
				await pkg.save();
			} catch {
				process.exitCode |= EXITS.SAVE; // eslint-disable-line require-atomic-updates
			}
		} else {
			process.exitCode |= code;
		}

		output.forEach((line) => {
			console.error(line);
		});
	});
}).catch((e) => {
	console.error(e.stack);
	process.exitCode |= EXITS.ERROR;
});
