#!/usr/bin/env node

/* eslint no-param-reassign: 0 */

'use strict';

const path = require('path');
const Semver = require('semver');
const { default: intersect } = require('fast_array_intersect');
const colors = require('colors/safe');
const yargs = require('yargs');
const jsonFile = require('json-file-plus');
const fromEntries = require('object.fromentries');
const values = require('object.values');
const allSettled = require('promise.allsettled');

const EXITS = require('../exit-codes');
const checkCurrent = require('../checkCurrent');
const checkEngines = require('../checkEngines');
const getLatestEngineMajors = require('../getLatestEngineMajors');
const table = require('../table');

const FALSE = Object(false);
const TRUE = Object(true);

const argv = yargs
	.option('mode', {
		choices: ['auto', 'actual', 'virtual', 'ideal'],
		default: 'auto',
		describe: `”actual“ reads from \`${colors.gray('node_modules')}\`; ”virtual“ reads from a lockfile; “ideal” reads from \`${colors.gray('package.json')}\``,
	})
	.option('production', {
		default: TRUE,
		describe: 'whether to include production deps or not',
		type: 'boolean',
	})
	.option('dev', {
		default: FALSE,
		describe: 'whether to include dev deps or not',
		type: 'boolean',
	})
	.option('peer', {
		default: FALSE,
		describe: 'whether to include peer deps or not',
		type: 'boolean',
	})
	.option('save', {
		default: false,
		describe: `update \`${colors.gray('package.json')}\`’s “engines” field to match that of your dependency graph`,
		type: 'boolean',
	})
	.option('current', {
		default: TRUE,
		describe: 'check that the current node version matches your dependency graph’s requirements',
		type: 'boolean',
	})
	.check(({ dev, production, peer, current }) => {
		/* eslint no-throw-literal: 0 */
		if (![dev, production, peer].some((x) => x === TRUE || x === true)) {
			throw 'At least one of `--dev`, `--production`, or `--peer` must be enabled.';
		}
		if (current && dev) {
			if (current !== TRUE) {
				throw '`--current` is not available when checking dev deps.';
			}
		}
		return true;
	})
	.middleware(({ dev, production, peer, current, ...args }) => {
		if (typeof dev === 'object') {
			dev = Boolean.prototype.valueOf.call(dev);
		}
		if (typeof production === 'object') {
			production = Boolean.prototype.valueOf.call(production);
		}
		if (typeof peer === 'object') {
			peer = Boolean.prototype.valueOf.call(peer);
		}
		if (typeof current === 'object') {
			current = !dev && Boolean.prototype.valueOf.call(current);
		}
		return { ...args, current, dev, peer, production };
	})
	.strict()
	.help()
	.parse();

const { current, dev, mode, peer, production, save } = argv;

const getTree = require('get-dep-tree');
const getNodeVersions = require('../get-node-versions');

const selectedEngines = ['node'];

const pPackage = jsonFile(path.join(process.cwd(), 'package.json'));

const pGraphEntries = getTree(mode, { dev, peer, production }).then(async (tree) => {
	const nodesWithEngines = tree.inventory.filter(({
		package: {
			_inBundle,
			engines,
		},
	}) => !_inBundle && engines && engines.node);
	const tuples = Array.from(
		nodesWithEngines,
		({ name, package: { engines } }) => [name, engines],
	);
	return tuples.filter(([, { node }]) => node && node !== '*');
});

function caret(ver) {
	return `^${ver.replace(/^v/g, '')}`;
}

const pAllVersions = getNodeVersions().then((nodeVersions) => ({
	node: nodeVersions,
}));

async function validVersionsForEngines(engines) {
	const allVersions = await pAllVersions;
	const entries = Object.entries(allVersions);
	return fromEntries(entries.map(([
		engine,
		versions,
	]) => [
		engine,
		versions.filter((v) => Semver.satisfies(v, engines[engine] || '*')),
	]));
}

async function getGraphValids(graphEntries) {
	if (graphEntries.length === 0) {
		return {
			allowed: [],
			valids: validVersionsForEngines({ node: '*' }),
		};
	}
	const graphAllowed = await Promise.all(graphEntries.map(async ([name, engines]) => [name, engines, await validVersionsForEngines(engines)]));
	const mergedGraphEngines = graphAllowed.reduce((mergedEngines, [, , engines]) => {
		const entries = Object.entries(engines);
		entries.forEach(([engine, versions]) => {
			if (!Array.isArray(mergedEngines[engine])) {
				mergedEngines[engine] = [];
			}
			mergedEngines[engine].push(versions);
		});
		return mergedEngines;
	}, {});
	return {
		allowed: graphAllowed,
		valids: fromEntries(Object.entries(mergedGraphEngines).map(([engine, versionArrays]) => {
			const intersection = intersect(versionArrays);
			return [engine, intersection.sort((a, b) => -Semver.compare(a, b))];
		})),
	};
}

const pRootRanges = pPackage.then(async (pkg) => {
	const engines = {
		node: '*',
		...pkg.data.engines,
	};
	const rangeEntries = Object.entries(engines).map(([engine, v]) => [engine, new Semver.Range(v)]);
	const ranges = fromEntries(rangeEntries);
	const valids = await validVersionsForEngines(engines);
	return { engines, ranges, valids };
});

function dropPatch(v) {
	const num = v.replace(/^v/, '');
	return `^${Semver.major(num)}.${Semver.minor(num)}`;
}

const pGraphRanges = pGraphEntries.then(async (graphEntries) => {
	const { valids: graphValids, allowed: graphAllowed } = await getGraphValids(graphEntries);
	const graphRanges = Object.entries(graphValids).map(([engine, versions]) => {
		const validMajorRanges = graphEntries.length > 0 && versions.length > 0 ? versions.reduceRight((prev, v) => {
			if (prev.length === 0) {
				return [v];
			}
			return Semver.satisfies(v, caret(prev[prev.length - 1])) ? prev : prev.concat(v);
		}, []).map(dropPatch).reverse() : ['*'];
		const lastMajor = validMajorRanges[validMajorRanges.length - 1];
		const greaterThanLowest = lastMajor === '*' ? lastMajor : `>= ${lastMajor.replace(/^\^/, '')}`;
		const validRange = versions.every((v) => Semver.satisfies(v, greaterThanLowest))
			? new Semver.Range(greaterThanLowest)
			: new Semver.Range(validMajorRanges.join(' || '));
		if (!versions.every((v) => validRange.test(v))) {
			throw new RangeError(`please report this: ${engine}: ${versions.join(',')} / ${validRange}`);
		}

		const displayRange = validRange.raw && validRange.raw.replace(/(?:\.0)+(?<spacing> |$)/g, '$<spacing>').split(' ').join(' ');
		return [engine, { displayRange, validRange }];
	});

	const engineEntries = graphRanges.map(([engine, { displayRange }]) => [engine, displayRange]);

	const engines = fromEntries(engineEntries);

	const validEntries = await Promise.all(selectedEngines.map(async (engine) => {
		const validForEngine = await validVersionsForEngines(engines);
		return [engine, validForEngine[engine]];
	}));
	const valids = fromEntries(validEntries);

	return {
		allowed: graphAllowed,
		engines,
		ranges: fromEntries(graphRanges),
		valids,
	};
});

const pLatestEngineMajors = Promise.all([
	pRootRanges,
	pGraphRanges,
	pAllVersions,
]).then(([
	{ ranges: rootRanges },
	{ ranges: graphRanges },
	allVersions,
]) => getLatestEngineMajors(selectedEngines, allVersions, rootRanges, graphRanges));

function wrapCommaSeparated(array, limit) {
	const str = array.join(', ');
	if (str.length <= limit) {
		return str;
	}

	return array.reduce((lines, version) => {
		const lastLine = lines.pop();
		const possibleLine = lastLine ? `${lastLine}, ${version}` : version;
		if (possibleLine.length <= limit) {
			return lines.concat(possibleLine);
		}
		return lines.concat(lastLine, version);
	}, []).map((x) => x.split(',').map((y) => colors.blue(y)).join(',')).join(',\n');
}

const majorsHeading = 'Currently available latest release of each valid major version:';

const pSummary = Promise.all([
	pRootRanges,
	pGraphRanges,
	pLatestEngineMajors,
]).then(([
	{ engines: rootEngines },
	{ engines: graphEngines, valids: graphValids },
	latestEngineMajors,
]) => ({
	output: [
		table([
			[
				'engine',
				majorsHeading,
			].map((x) => colors.bold(colors.gray(x))),
			...Object.entries(latestEngineMajors).map(([
				engine,
				{ root, graph },
			]) => [
				colors.blue(engine),
				wrapCommaSeparated(graph.length > 0 ? intersect([root, graph]) : root, majorsHeading.length),
			]),
		]),
		table([
			[].concat(
				'package engines:',
				'dependency graph engines:',
			).map((x) => colors.bold(colors.gray(x))),
			[
				`"engines": ${JSON.stringify(rootEngines, null, 2)}`,
				values(graphValids).some((x) => x.length > 0) && values(graphEngines).length > 0 ? `"engines": ${JSON.stringify(graphEngines, null, 2)}` : 'N/A',
			].map((x) => colors.blue(x)),
		]),
	],
}));

Promise.all([
	pGraphRanges,
	pPackage,
	pRootRanges,
]).then(async ([
	{
		allowed: graphAllowed,
		valids: graphValids,
		ranges: { node: { displayRange } = { displayRange: '*' } },
	},
	pkg,
	{
		engines: rootEngines,
		valids: rootValids,
	},
]) => {
	const pEngines = checkEngines(
		selectedEngines,
		rootEngines.node,
		rootValids,
		graphValids,
		graphAllowed,
		displayRange,
		save,
	);

	const pCurrent = current ? checkCurrent(selectedEngines, rootValids, graphValids) : { output: [] };

	// print out successes first
	const results = await allSettled([pSummary, pEngines, pCurrent]);
	const fulfilleds = results.filter((result) => result.status === 'fulfilled');
	const rejecteds = results.filter((result) => result.status === 'rejected');
	await fulfilleds.reduce(async (prev, { doSave, value: { output } }) => {
		await prev;

		output.forEach((line) => {
			console.log(line);
		});

		if (save && doSave) {
			doSave(pkg.data);
			try {
				await pkg.save();
			} catch {
				process.exitCode |= EXITS.SAVE;
			}
		}
	}, Promise.resolve());

	// print out failures last
	await rejecteds.reduce(async (prev, error) => {
		await prev;

		if (!error || !error.reason) {
			throw error;
		}
		const { reason } = error;
		const { code, output, save: doSave } = reason;
		if (!output) {
			throw reason;
		}

		if (save && doSave) {
			doSave(pkg.data);
			try {
				await pkg.save();
			} catch {
				process.exitCode |= EXITS.SAVE;
			}
		} else {
			process.exitCode |= code;
		}
		output.forEach((line) => {
			console.error(line);
		});
	}, Promise.resolve());
}).catch((e) => {
	console.error((e && e.stack) || e);
	process.exitCode |= EXITS.ERROR;
});
