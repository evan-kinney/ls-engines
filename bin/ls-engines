#!/usr/bin/env node

'use strict';

const Arborist = require('@npmcli/arborist');
const Semver = require('semver');
const getJSON = require('get-json');
const { default: intersect } = require('fast_array_intersect');
const chalk = require('chalk');
const yargs = require('yargs');

const { argv: { mode } } = yargs
	.option('mode', {
		choices: ['auto', 'actual', 'virtual', 'ideal'],
		default: 'auto',
		describe: '”actual“ reads from `node_modules`; ”virtual“ reads from a lockfile; “ideal” reads from `package.json`'
	})
/*
	.option('only', {
		choices: ['production', 'dev'],
		describe: 'include only production, or only dev, deps'
	})
*/
	.strict()
	.help();

const npmInfo = require('../npm-info');

const arb = new Arborist();

const nodeVersions = getJSON('http://nodejs.org/dist/index.json').then(i => i.map(x => x.version));

const treeP = npmInfo(mode).then(async ({ hasNodeModules, hasLockfile, hasPackage }) => {
	if (mode === 'actual' || hasNodeModules) {
		const messages = [].concat(
			hasNodeModules ? '`node_modules` found' : [],
			mode === 'actual' ? 'mode is “actual”' : [],
		);
		console.log(chalk.green(`${messages.join(', ')}; loading tree from disk...`));
		return arb.loadActual();
	}

	if (mode === 'virtual' || hasLockfile) {
		const messages = [].concat(
			hasLockfile ? 'lockfile found' : [],
			mode === 'virtual' ? 'mode is “virtual”' : [],
		);
		console.log(chalk.green(`${messages.join(', ')}; loading virtual tree from lockfile...`));
		return arb.loadVirtual();
	}

	const messages = [].concat(
		`\`package.json\` ${hasPackage ? '' : 'not '}found`,
		mode === 'ideal' ? 'mode is “ideal”' : [],
	);
	console.log(chalk.green(`${messages.join(', ')}; building ideal tree from package.json...`));
	return arb.buildIdealTree();
});

const nameRanges = treeP.then(async (tree) => {
	const tuples = [[tree.package.name, tree.package.engines && tree.package.engines.node]].concat(
		Array.from(
			tree.inventory.filter(({ package: { engines } }) => engines && engines.node),
			({ name, package: { engines: { node } } }) => [name, node]
		),
	).filter(x => x && x[1]);
	return tuples
		.filter(([, node]) => node !== '*')
		.map(([name, node]) => [name, new Semver.Range(node)]);
});

function removeV(ver) {
	return ver.replace(/^v/g,'');
}
function caret(ver) {
	return '^' + removeV(ver);
}

Promise.all([nodeVersions, nameRanges]).then(([nodeVersions, nameRanges]) => {
	const allowedVersions = nameRanges.map(([n, r]) => [n, nodeVersions.filter(v => r.test(v))]);
	const valids = nameRanges.length > 0 ? intersect(allowedVersions.map(([, vs]) => vs)) : nodeVersions;
	const validMajorRanges = nameRanges.length > 0 ? valids.reduceRight((prev, v) => {
		prev = [].concat(prev);
		return Semver.satisfies(v, caret(prev[prev.length - 1])) ? prev : prev.concat(v);
	}).map(caret) : ['*'];
	const validRange = new Semver.Range(validMajorRanges.join(' || '));
	if (!valids.every(v => validRange.test(v))) {
		throw new RangeError('please report this: ' + valids.join(',') + ' / ' + validRange);
	}
	if (validRange.raw) {
		console.log(chalk.gray(`\nValid node version range: ${validRange.raw.replace(/(\.0)+( |$)/g, '$2').split(' ').reverse().join(' ')}`));
		const latestMajors = validMajorRanges.map(r => Semver.maxSatisfying(nodeVersions, r).replace(/(\.0)+$/, ''));
		console.log(chalk.bold(chalk.gray(`\nCurrently available, most recent, valid node major versions: ${latestMajors.reverse().join(', ')}`)));
	}
	const currentValid = valids.includes(process.version);
	console.log(`\nCurrent node version, ${chalk.blue(chalk.bold(process.version))}, is ${chalk.bold(currentValid ? chalk.greenBright('valid') : chalk.red('invalid'))}!`);
	process.exitCode = currentValid ? 0 : 1;
}).catch((e) => {
	console.error(e.stack);
	process.exitCode = 2;
});
